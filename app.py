import os
import logging
from flask import Flask, request, abort
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from dotenv import load_dotenv # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ---
# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßá (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá, Render-‡¶è ‡¶è‡¶ü‡¶ø ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ)
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL') # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡ßá‡¶∞ URL
# Render ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá‡¶∞ URL (Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, Render ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ü‡¶ø ‡¶¶‡ßá‡ßü ‡¶®‡¶æ, ‡¶§‡¶æ‡¶á ‡¶®‡¶ø‡¶ú‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá)
# ‡¶Ö‡¶•‡¶¨‡¶æ, Render ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶™‡ßç‡¶≤‡ßü‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶∞ URL ‡¶ü‡¶ø ‡¶®‡¶ø‡ßü‡ßá Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
# ‡¶Ü‡¶™‡¶æ‡¶§‡¶§, ‡¶Ü‡¶Æ‡¶∞‡¶æ Webhook ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶∞‡ßÅ‡¶ü ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßã‡•§
RENDER_APP_URL = os.getenv('RENDER_APP_URL') # ‡¶Ø‡ßá‡¶Æ‡¶®: https://your-app-name.onrender.com

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶Ø‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
REQUIRED_CHANNELS = [
    {
        'id': '@global_Fun22', # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ (@ ‡¶∏‡¶π)
        'name': 'Global Fun',
        'url': 'https://t.me/global_Fun22'
    },
    {
        'id': '@instant_earn_airdrop',
        'name': 'Instant Earn Airdrop',
        'url': 'https://t.me/instant_earn_airdrop'
    },
    {
        'id': '@myearn_Cash_payment',
        'name': 'MyEarn Cash Payment',
        'url': 'https://t.me/myearn_Cash_payment'
    }
]
# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ ---

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
app = Flask(__name__)

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶ø‡¶≤‡ßç‡¶°‡¶æ‡¶∞
if not BOT_TOKEN:
    logger.error("BOT_TOKEN ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á!")
    # ‡¶™‡ßç‡¶∞‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§
    # ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø None ‡¶¶‡¶ø‡ßü‡ßá ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø ‡¶Ø‡¶æ‡¶§‡ßá ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶π‡ßü
    ptb_application = None
else:
    ptb_application = Application.builder().token(BOT_TOKEN).build()

async def check_user_membership(user_id: int, chat_id: str, context: CallbackContext) -> bool:
    """‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶™‡¶¶ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá"""
    try:
        member = await context.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        if member.status in ['member', 'administrator', 'creator']:
            return True
        logger.info(f"User {user_id} is '{member.status}' in channel {chat_id}")
        return False
    except Exception as e:
        logger.error(f"Error checking membership for user {user_id} in channel {chat_id}: {e}")
        return False # ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶ø (‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)

async def start_command(update: Update, context: CallbackContext) -> None:
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá"""
    user = update.effective_user
    if not user:
        logger.warning("No user found in update for /start command.")
        return

    user_id = user.id
    chat_id = update.effective_chat.id

    not_joined_channels = []
    all_joined = True

    for channel in REQUIRED_CHANNELS:
        is_member = await check_user_membership(user_id, channel['id'], context)
        if not is_member:
            all_joined = False
            not_joined_channels.append(channel)

    if all_joined:
        welcome_message = "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∏‡¶ï‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n" \
                          "‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:"
        keyboard = [
            [InlineKeyboardButton("üåê ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", web_app=WebAppInfo(url=WEB_APP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_html(text=welcome_message, reply_markup=reply_markup)
    else:
        join_message = "‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n"
        inline_keyboard_buttons = []

        for channel_info in not_joined_channels:
            join_message += f"‚û°Ô∏è <b>{channel_info['name']}</b>\n"
            inline_keyboard_buttons.append(
                [InlineKeyboardButton(f"üîó {channel_info['name']}", url=channel_info['url'])]
            )
        
        join_message += "\n‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        inline_keyboard_buttons.append(
            [InlineKeyboardButton("‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø / ‡¶∞‡¶ø‡¶ö‡ßá‡¶ï", callback_data='check_join_status')]
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard_buttons)
        await update.message.reply_html(text=join_message, reply_markup=reply_markup)

async def button_callback_handler(update: Update, context: CallbackContext) -> None:
    """‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá"""
    query = update.callback_query
    await query.answer() # ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø

    if query.data == 'check_join_status':
        # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ "‡¶Ü‡¶Æ‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø" ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá, /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
        # ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶≠‡¶æ‡¶≤‡ßã, ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡ßü‡ßá
        # ‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï‡¶ü‡¶æ‡¶ï‡ßá‡¶á ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶¨, ‡¶§‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá‡•§
        # ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶æ‡¶Æ‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§
        # ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø start_command ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø update.message ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá, ‡¶Ø‡¶æ callback query ‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ‡•§
        # ‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßã‡•§

        user_id = query.from_user.id
        chat_id = query.message.chat_id
        
        not_joined_channels = []
        all_joined = True

        for channel in REQUIRED_CHANNELS:
            is_member = await check_user_membership(user_id, channel['id'], context)
            if not is_member:
                all_joined = False
                not_joined_channels.append(channel)

        if all_joined:
            welcome_message = "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∏‡¶ï‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n" \
                              "‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:"
            keyboard = [
                [InlineKeyboardButton("üåê ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", web_app=WebAppInfo(url=WEB_APP_URL))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
            # await query.message.delete() # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ú‡ßü‡ßá‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá
            await context.bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=reply_markup, parse_mode='HTML')
        else:
            join_message = "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø:\n\n"
            inline_keyboard_buttons = []
            for channel_info in not_joined_channels:
                join_message += f"‚û°Ô∏è <b>{channel_info['name']}</b>\n"
                inline_keyboard_buttons.append(
                    [InlineKeyboardButton(f"üîó {channel_info['name']}", url=channel_info['url'])]
                )
            join_message += "\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ '‡¶∞‡¶ø‡¶ö‡ßá‡¶ï' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
            inline_keyboard_buttons.append(
                [InlineKeyboardButton("‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø / ‡¶∞‡¶ø‡¶ö‡ßá‡¶ï", callback_data='check_join_status')]
            )
            reply_markup = InlineKeyboardMarkup(inline_keyboard_buttons)
            # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
            try:
                await query.edit_message_text(text=join_message, reply_markup=reply_markup, parse_mode='HTML')
            except Exception as e: # ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ñ‡ßÅ‡¶¨ ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶π‡ßü ‡¶¨‡¶æ ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶ï‡¶á ‡¶•‡¶æ‡¶ï‡ßá, ‡¶è‡¶°‡¶ø‡¶ü ‡¶´‡ßá‡¶á‡¶≤ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
                logger.error(f"Could not edit message: {e}")
                # ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá
                await context.bot.send_message(chat_id=chat_id, text=join_message, reply_markup=reply_markup, parse_mode='HTML')


# Flask ‡¶∞‡ßÅ‡¶ü: Webhook ‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.route('/webhook', methods=['POST'])
async def webhook():
    if request.method == "POST":
        json_data = request.get_json()
        if not json_data:
            logger.warning("Received empty JSON data.")
            abort(400)
        
        update = Update.de_json(json_data, ptb_application.bot)
        logger.info(f"Received update: {update.update_id}")
        await ptb_application.process_update(update)
        return '', 200 # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    else:
        abort(400)

# Flask ‡¶∞‡ßÅ‡¶ü: Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá)
@app.route('/set_webhook', methods=['GET'])
async def set_webhook():
    if not RENDER_APP_URL:
        return "RENDER_APP_URL ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á!", 500
    
    webhook_url = f"{RENDER_APP_URL}/webhook" # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ RENDER_APP_URL ‡¶è ‡¶ü‡ßç‡¶∞‡ßá‡¶á‡¶≤‡¶ø‡¶Ç ‡¶∏‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶®‡ßá‡¶á
    
    try:
        success = await ptb_application.bot.set_webhook(url=webhook_url)
        if success:
            return f"Webhook ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {webhook_url}", 200
        else:
            return "Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!", 500
    except Exception as e:
        logger.error(f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}", 500

@app.route('/delete_webhook', methods=['GET'])
async def delete_webhook_route():
    try:
        success = await ptb_application.bot.delete_webhook()
        if success:
            return "Webhook ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", 200
        else:
            return "Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!", 500
    except Exception as e:
        logger.error(f"Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return f"Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}", 500

# ‡¶∞‡ßÅ‡¶ü ‡¶™‡ßá‡¶ú (‡¶Ö‡¶™‡¶∂‡¶®‡¶æ‡¶≤, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶¨‡ßã‡¶ù‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
@app.route('/')
def index():
    return "Telegram Bot is running with Flask!", 200

def main() -> None:
    """‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßá"""
    if not ptb_application:
        logger.critical("Telegram Application ‡¶¨‡¶ø‡¶≤‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ BOT_TOKEN ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    # ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    ptb_application.add_handler(CommandHandler("start", start_command))
    ptb_application.add_handler(CallbackQueryHandler(button_callback_handler))

    # ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (Render gunicorn ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá)
    # Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡ßá ‡¶ö‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá,
    # ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ python-telegram-bot v20+ asyncio ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá,
    # ‡¶§‡¶æ‡¶á gunicorn ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶ó‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
    # ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ gunicorn ‡¶®‡¶ø‡¶ú‡ßá‡¶á worker ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§

    # ‡¶è‡¶á main() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø Render gunicorn ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ï‡¶≤ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§
    # gunicorn app:app ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶≤‡ßá Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü 'app' ‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßá‡•§
    # Webhook ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶¨‡¶ü ‡¶ö‡¶≤‡¶¨‡ßá‡•§
    logger.info("Bot handlers are set up.")

if ptb_application: # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü
    main() # ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø main() ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá

# Gunicorn ‡¶è‡¶á 'app' ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶¨‡ßá
# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, gunicorn ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶®‡¶æ‡¶≤‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá:
# gunicorn app:app
# Render-‡¶è Start Command ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§