import os
import logging
from flask import Flask, request, abort
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from dotenv import load_dotenv # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import asyncio # <--- ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ---
# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßá (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá, Render-‡¶è ‡¶è‡¶ü‡¶ø ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ)
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL') # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡ßá‡¶∞ URL
RENDER_APP_URL = os.getenv('RENDER_APP_URL') # ‡¶Ø‡ßá‡¶Æ‡¶®: https://your-app-name.onrender.com

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶Ø‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
REQUIRED_CHANNELS = [
    {
        'id': '@global_Fun22', # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ (@ ‡¶∏‡¶π)
        'name': 'Global Fun',
        'url': 'https://t.me/global_Fun22'
    },
    {
        'id': '@instant_earn_airdrop',
        'name': 'Instant Earn Airdrop',
        'url': 'https://t.me/instant_earn_airdrop'
    },
    {
        'id': '@myearn_Cash_payment',
        'name': 'MyEarn Cash Payment',
        'url': 'https://t.me/myearn_Cash_payment'
    }
]
# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ ---

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
app = Flask(__name__)

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶ø‡¶≤‡ßç‡¶°‡¶æ‡¶∞
if not BOT_TOKEN:
    logger.error("BOT_TOKEN ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á!")
    ptb_application = None
else:
    ptb_application = Application.builder().token(BOT_TOKEN).build()

async def check_user_membership(user_id: int, chat_id: str, context: CallbackContext) -> bool:
    """‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶™‡¶¶ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá"""
    try:
        member = await context.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        if member.status in ['member', 'administrator', 'creator']:
            return True
        logger.info(f"User {user_id} is '{member.status}' in channel {chat_id}")
        return False
    except Exception as e:
        logger.error(f"Error checking membership for user {user_id} in channel {chat_id}: {e}")
        return False

async def start_command(update: Update, context: CallbackContext) -> None:
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá"""
    user = update.effective_user
    if not user:
        logger.warning("No user found in update for /start command.")
        return

    user_id = user.id
    chat_id = update.effective_chat.id

    not_joined_channels = []
    all_joined = True

    for channel in REQUIRED_CHANNELS:
        is_member = await check_user_membership(user_id, channel['id'], context)
        if not is_member:
            all_joined = False
            not_joined_channels.append(channel)

    if all_joined:
        welcome_message = "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∏‡¶ï‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n" \
                          "‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:"
        keyboard = [
            [InlineKeyboardButton("üåê ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", web_app=WebAppInfo(url=WEB_APP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_html(text=welcome_message, reply_markup=reply_markup)
    else:
        join_message = "‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n"
        inline_keyboard_buttons = []

        for channel_info in not_joined_channels:
            join_message += f"‚û°Ô∏è <b>{channel_info['name']}</b>\n"
            inline_keyboard_buttons.append(
                [InlineKeyboardButton(f"üîó {channel_info['name']}", url=channel_info['url'])]
            )
        
        join_message += "\n‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        inline_keyboard_buttons.append(
            [InlineKeyboardButton("‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø / ‡¶∞‡¶ø‡¶ö‡ßá‡¶ï", callback_data='check_join_status')]
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard_buttons)
        await update.message.reply_html(text=join_message, reply_markup=reply_markup)

async def button_callback_handler(update: Update, context: CallbackContext) -> None:
    """‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá"""
    query = update.callback_query
    await query.answer() 

    if query.data == 'check_join_status':
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        
        not_joined_channels = []
        all_joined = True

        for channel in REQUIRED_CHANNELS:
            is_member = await check_user_membership(user_id, channel['id'], context)
            if not is_member:
                all_joined = False
                not_joined_channels.append(channel)

        if all_joined:
            welcome_message = "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∏‡¶ï‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n" \
                              "‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:"
            keyboard = [
                [InlineKeyboardButton("üåê ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", web_app=WebAppInfo(url=WEB_APP_URL))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=reply_markup, parse_mode='HTML')
        else:
            join_message = "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø:\n\n"
            inline_keyboard_buttons = []
            for channel_info in not_joined_channels:
                join_message += f"‚û°Ô∏è <b>{channel_info['name']}</b>\n"
                inline_keyboard_buttons.append(
                    [InlineKeyboardButton(f"üîó {channel_info['name']}", url=channel_info['url'])]
                )
            join_message += "\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ '‡¶∞‡¶ø‡¶ö‡ßá‡¶ï' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
            inline_keyboard_buttons.append(
                [InlineKeyboardButton("‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø / ‡¶∞‡¶ø‡¶ö‡ßá‡¶ï", callback_data='check_join_status')]
            )
            reply_markup = InlineKeyboardMarkup(inline_keyboard_buttons)
            try:
                await query.edit_message_text(text=join_message, reply_markup=reply_markup, parse_mode='HTML')
            except Exception as e: 
                logger.error(f"Could not edit message: {e}")
                await context.bot.send_message(chat_id=chat_id, text=join_message, reply_markup=reply_markup, parse_mode='HTML')


# Flask ‡¶∞‡ßÅ‡¶ü: Webhook ‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.route('/webhook', methods=['POST'])
async def webhook(): # ‡¶è‡¶á ‡¶∞‡ßÅ‡¶ü‡¶ü‡¶ø async ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
    if request.method == "POST":
        if ptb_application is None:
            logger.error("PTB Application is not initialized. BOT_TOKEN might be missing.")
            abort(500) # ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶è‡¶∞‡¶∞ ‡¶ï‡ßã‡¶°

        json_data = request.get_json()
        if not json_data:
            logger.warning("Received empty JSON data.")
            abort(400)
        
        update = Update.de_json(json_data, ptb_application.bot)
        logger.info(f"Received update: {update.update_id}")
        await ptb_application.process_update(update)
        return '', 200 
    else:
        abort(400)

# Flask ‡¶∞‡ßÅ‡¶ü: Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá)
@app.route('/set_webhook', methods=['GET'])
def set_webhook(): # <--- 'async def' ‡¶•‡ßá‡¶ï‡ßá 'def' ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    if ptb_application is None:
        return "Telegram Application ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø (BOT_TOKEN ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ?)", 500
    if not RENDER_APP_URL:
        return "RENDER_APP_URL ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á!", 500
    
    webhook_url = f"{RENDER_APP_URL.rstrip('/')}/webhook" # ‡¶ü‡ßç‡¶∞‡ßá‡¶á‡¶≤‡¶ø‡¶Ç ‡¶∏‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    
    async def _set_webhook_async(): # <--- ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶° async ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
        return await ptb_application.bot.set_webhook(url=webhook_url, allowed_updates=["message", "callback_query"])

    try:
        # asyncio.run() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá async ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        # Gunicorn ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        success = loop.run_until_complete(_set_webhook_async())
        
        if success:
            return f"Webhook ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {webhook_url}", 200
        else:
            # Webhook ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶´‡ßá‡¶á‡¶≤ ‡¶π‡¶≤‡ßá ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶≤‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
            # info = await ptb_application.bot.get_webhook_info()
            # logger.error(f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! Info: {info}")
            return "Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!", 500
    except RuntimeError as e: # ‡¶Ø‡ßá‡¶Æ‡¶®: "asyncio.run() cannot be called from a running event loop"
        logger.error(f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá RuntimeError (‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ Gunicorn ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶®‡¶´‡ßç‡¶≤‡¶ø‡¶ï‡ßç‡¶ü): {e}")
        # ‡¶è‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ptb_application ‡¶è‡¶∞ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø
        try:
            if ptb_application and hasattr(ptb_application, 'loop') and ptb_application.loop.is_running():
                 future = asyncio.run_coroutine_threadsafe(_set_webhook_async(), ptb_application.loop)
                 success = future.result(timeout=10) # ‡ßß‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá
                 if success:
                     return f"Webhook ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶∏‡ßá‡¶´): {webhook_url}", 200
                 else:
                     return "Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• (‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶∏‡ßá‡¶´)!", 500
            else: # ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï
                 logger.warning("PTB application loop is not available or not running for threadsafe call.")
                 return f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e} (PTB loop unavailable for threadsafe)", 500
        except Exception as ex_inner:
            logger.error(f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶∏‡ßá‡¶´ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {ex_inner}")
            return f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶∏‡ßá‡¶´): {ex_inner}", 500

    except Exception as e:
        logger.error(f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return f"Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}", 500

@app.route('/delete_webhook', methods=['GET'])
def delete_webhook_route(): # <--- 'async def' ‡¶•‡ßá‡¶ï‡ßá 'def' ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    if ptb_application is None:
        return "Telegram Application ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø (BOT_TOKEN ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ?)", 500

    async def _delete_webhook_async(): # <--- ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶° async ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
        return await ptb_application.bot.delete_webhook()
        
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        success = loop.run_until_complete(_delete_webhook_async())
        if success:
            return "Webhook ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", 200
        else:
            return "Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!", 500
    except RuntimeError as e:
        logger.error(f"Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá RuntimeError: {e}")
        try:
            if ptb_application and hasattr(ptb_application, 'loop') and ptb_application.loop.is_running():
                 future = asyncio.run_coroutine_threadsafe(_delete_webhook_async(), ptb_application.loop)
                 success = future.result(timeout=10)
                 if success:
                     return f"Webhook ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶∏‡ßá‡¶´)!", 200
                 else:
                     return "Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• (‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶∏‡ßá‡¶´)!", 500
            else:
                 logger.warning("PTB application loop is not available or not running for threadsafe delete.")
                 return f"Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e} (PTB loop unavailable for threadsafe)", 500
        except Exception as ex_inner:
            logger.error(f"Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶∏‡ßá‡¶´ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {ex_inner}")
            return f"Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶∏‡ßá‡¶´): {ex_inner}", 500
    except Exception as e:
        logger.error(f"Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return f"Webhook ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}", 500

# ‡¶∞‡ßÅ‡¶ü ‡¶™‡ßá‡¶ú (‡¶Ö‡¶™‡¶∂‡¶®‡¶æ‡¶≤, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶¨‡ßã‡¶ù‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
@app.route('/')
def index():
    if ptb_application is None:
        return "Telegram Bot is NOT running (BOT_TOKEN missing or invalid).", 500
    return "Telegram Bot is running with Flask!", 200

def main() -> None:
    """‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßá"""
    if not ptb_application:
        logger.critical("Telegram Application ‡¶¨‡¶ø‡¶≤‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ BOT_TOKEN ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    # ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    ptb_application.add_handler(CommandHandler("start", start_command))
    ptb_application.add_handler(CallbackQueryHandler(button_callback_handler))
    logger.info("Bot handlers are set up.")

if ptb_application: 
    main()